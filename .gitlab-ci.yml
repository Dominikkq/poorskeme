stages:
  - install
  - build
  - upload
  - release
  # - deploy

variables:
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}"

install:
  stage: install
  image: node:14.18.2
  rules:
    - if: $CI_COMMIT_TAG                  # Run this job when a tag is created manually
  script: 
    - cd frontend
    - npm install @angular/cli
    - npm install
  artifacts:
    expire_in: 2 weeks
    paths:
      - frontend/node_modules/
  cache:
    paths:
      - frontend/node_modules/
  # only:
  #   - master

build:
  stage: build
  image: node:14.18.2
  rules:
    - if: $CI_COMMIT_TAG                  # Run this job when a tag is created manually
  dependencies:
      - install
  before_script:
      - apt-get update -qy
      - apt-get -y install zip unzip
      - echo $CI_JOB_ID
      # Writing GE_JOB_ID variable to environment file, will need the value in the next stage.
  script:
      - cd frontend
      - npm install @angular/cli
      - npm install @angular-devkit/build-angular
      - npm run build --prod
      - cd ..
      - mkdir -p /tmp/poorSKeme/frontend
      # TODO : README
      - cp poorSKeme.py /tmp/poorSKeme
      - cp api_poorSKeme.py /tmp/poorSKeme
      - cp requirements.txt /tmp/poorSKeme
      - cp -r frontend/dist /tmp/poorSKeme/frontend
      # - mv /tmp/iKy-pack/backend/.README.md /tmp/iKy-pack/README.md
      - cd /tmp
      - zip -r poorSKeme.zip ./poorSKeme
      - mv /tmp/poorSKeme.zip "$CI_PROJECT_DIR"
      - cd $CI_PROJECT_DIR
  artifacts:
    expire_in: 2 weeks
    paths:
      - poorSKeme.zip
      # - /tmp/poorSKeme.zip

# deploy:
#   stage: deploy
#   before_script:
#     - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
#     - eval $(ssh-agent -s)
#     - ssh-add <(echo "$SSH_PRIVATE_KEY")
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#   script:
#     - git config --global user.email "${GITLAB_USER_EMAIL}"
#     - git config --global user.name "${GITLAB_USER_NAME}"
#     - git clone git@gitlab.com:kennbroorg/ikyweb.git /tmp/page
#     - cp iKy.zip /tmp/page/file/iKy.zip
#     - cd /tmp/page
#     - git add file/iKy.zip
#     - git commit -m "iKy ZIP file from $CI_COMMIT_SHORT_SHA" || echo "No changes, nothing to commit!"
#     - git remote rm origin && git remote add origin git@gitlab.com:kennbroorg/ikyweb.git
#     - git push origin master
#   only:
#     - master

# release:
#   stage: release
#   before_script:
#     - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
#     - eval $(ssh-agent -s)
#     - ssh-add <(echo "$SSH_PRIVATE_KEY")
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#   script:
#     - git config --global user.email "${GITLAB_USER_EMAIL}"
#     - git config --global user.name "${GITLAB_USER_NAME}"
#     - git clone git@gitlab.com:kennbroorg/ikyweb.git /tmp/page
#     - cp iKy.zip /tmp/page/file/iKy.zip
#     - cd /tmp/page
#     - git add file/iKy.zip
#     - git commit -m "iKy ZIP file from $CI_COMMIT_SHORT_SHA" || echo "No changes, nothing to commit!"
#     - git remote rm origin && git remote add origin git@gitlab.com:kennbroorg/ikyweb.git
#     - git push origin master
#   only:
#     - master

# release:
#   stage: release
#   image: registry.gitlab.com/gitlab-org/release-cli:latest
#   name: 'Release $CI_COMMIT_TAG'
#   description: 'Created using the release-cli $EXTRA_DESCRIPTION'  # $EXTRA_DESCRIPTION must be defined
#   tag_name: '$CI_COMMIT_TAG'                                       # elsewhere in the pipeline.
#   ref: '$CI_COMMIT_TAG'
#   # milestones:
#   #   - 'm1'
#   #   - 'm2'
#   #   - 'm3'
#   # released_at: '2020-07-15T08:00:00Z'  # Optional, is auto generated if not defined, or can use a variable.
#   assets: # Optional, multiple asset links
#     links:
#       - name: 'asset2'
#         url: 'https://example.com/assets/2'
#         filepath: '/pretty/url/1' # optional
#         link_type: 'other' # optional


# release:
#   stage: release
#   image: registry.gitlab.com/gitlab-org/release-cli:latest
#   script:
#     - echo 'Running release_job'
#     - echo 'Previous Job ID is printed below'
#     - echo $GE_JOB_ID
#   # Specifying that this job requires artifacts from the previous job to succeed
#   needs:
#     - job: build
#       artifacts: true
#   release:
#     name: 'Release ZIP $CI_COMMIT_SHORT_SHA'
#     description: 'Created using the release-cli'
#     # tag_name is a mendatory field and can not be an empty string
#     tag_name: '$CI_COMMIT_TAG'                                       # elsewhere in the pipeline.
#     # tag_name: '$CI_COMMIT_SHORT_SHA'
#     assets:
#       links:
#         - name: 'ZIP file'
#           url: 'https://gitlab.com/codemancers/engineering/cw/-/jobs/${GE_JOB_ID}/artifacts/file/dist/poorSKeme.zip'
#   only:
#     # Can be removed if you want to trigger the pipeline for merge request or other branches
#     - master

# release:
#     image: inetprocess/gitlab-release
#     stage: release
#     only:
#         - tags
#     dependencies: 
#         - build
#     script:
#         - echo ${GITLAB_ACCESS_TOKEN}
#         - gitlab-release --help
#         - gitlab-release --message 'Automatic release - ${CI_COMMIT_TAG}' ./poorSKeme.zip

upload:
  stage: upload
  image: curlimages/curl:latest
  dependencies:
      - build
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo ${CI_JOB_TOKEN}
    - echo ${PACKAGE_REGISTRY_URL}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file poorSKeme.zip "${PACKAGE_REGISTRY_URL}/poorSKeme.zip"

release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  dependencies:
      - upload
  rules:
    - if: $CI_COMMIT_TAG                                            # Run this job when a tag is created manually
  script:
    - release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG --assets-link "{\"name\":\"poorSKeme.zip\",\"url\":\"${PACKAGE_REGISTRY_URL}/poorSKeme.zip\"}"
    # - |
    #   release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
    #     --assets-link "{\"name\":\"poorSKeme.zip\",\"url\":\"${PACKAGE_REGISTRY_URL}/poorSKeme.zip\"}"